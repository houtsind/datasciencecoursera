x<-c(0.5,0.6)
x
x<-vector("numeric",length =20)
x
x<--1
x
as.logical(x)
m<-matrix(nrow=2,ncol=3)
m
dim(m)
attributes(m)
m<-matrix(1:6)
m
m<-matrix(1:7,2,3)
m<-matrix(1:7,3,3)
x<-list(1,2,"a")
x
x<-factor(c("yes","yes","no"))
x
table(x)
unclass(x)
install.packages("swirl")
library(swirl)
swirl()
exit
q()
find.package("devtools")
install.packages("devtools")
find.package("devtools")
library(devtools)
find_rtools()
test
ls
ls()
m
msg
x
rm(list(ls()))
rm(list(ls())
ls
ls()
rm(list=ls())
list
ls()
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f(3)
z<-10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
rm(list=ls())
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
rm(list=ls())
x <- 1:10
if(x > 5) {
x <- 0
}
library(datasets)
data(iris)
iris
str(iris)
?iris
mean
?mean
mean(iris)
mean(iris[Sepal.Length])
mean(iris$Sepal.Length)
lapply(iris$Sepal.Length,mean)
mean(iris$Sepal.Length[Species=="virginica"],)
mean(iris$Sepal.Length[species=="virginica"],)
iris[species]
iris$species
str(iris)
iris$Species
mean(iris$Sepal.Length,Species=="virginica")
str(tapply)
?tapply
tapply(iris$Sepal.Length)
tapply(iris$Species)
tapply(iris)
tapply(iris,mean)
class
class(iris)
class(iris$Species)
class(iris$Sepal.Length)
tapply(iris$Sepal.Length,iris$Species,mean)
iris[,1:4]
rowMean
rowMeans
str(rowMeans)
?rowMeans
rowMeans(iris[,1:4])
str(iris)
?apply
apply(iris[,1:4],2,mean)
apply(iris,2,mean)
rm(list=ls())
library(mtcars)
library(datasets)
data(mtcars)
?datasets
library(help="datasets")
?mtcars
str(with)
help.with
help(with)
with(mtcars,tapply(mpg,cyl,mean))
str(mtcars)
mtcars[,2]
sapply(mtcars,cyl,mean)
mean(mtcars$mpg,mtcars$cyl)
mean(mtcars$mpg)
str(mean)
?mean
str(split)
?split
cyls<-split(mtcars,mtcars$cyl)
cyls
mean(cyls[,2])
cyls[,2]
cyls[1,2]
class(cyls)
cyls$2
cyls$cyl
cyls[[cyl]]
cyls[cyl]
cyls$cyl
class(cyls$cyl)
lapply(cyls,mean)
rm(cyls)
lapply(split(mtcars,cyl),mean)
lapply(split(mtcars,mtcars$cyl),mean)
lapply(split(mtcars,mtcars[cyl]),mean)
lapply(split(mtcars,mtcars[,2]),mean)
cyls<-split(mtcars,mtcars$cyl)
cyls
lapply(cyls,function(x) colMeans(x[,c("Cyl")]))
lapply(cyls,function(x) colMeans(x[,c("4","6,","8")]))
?lapply
lapply(cyls,mean colMeans(x[,c("4","6,","8")]))
lapply(cyls,mean,colMeans(x[,c("4","6,","8")]))
lapply(cyls,mean,colMeans(cyls[,c("4","6,","8")]))
lapply(cyls,mean,colMeans(cyls[,"Cyl")]))
lapply(cyls,mean,colMeans(cyls[,"Cyl"]))
colMeans
colMeans(cyls)
colMeans(cyls[,2])
colMeans(cyls[,2:4])
View(mtcars)
View(mtcars)
with(mtcars,tapply(hp,cyl,mean))
str(mtcars)
str(abs)
?abs
tapply(hp,cyl==4,mean)
tapply(hp,mtcars$cyl==4,mean)
tapply(hp,mtcars$cyl,mean)
tapply(mtcars$hp,mtcars$cyl,mean)
sapply(mtcars$hp,mtcars$cyl,mean)
str(sapply)
cyls
sapply(cyls,mean)
class(cyls$cyl)
ncol(cyls)
cyls
cyls[4,1]
lapply(cyls,mean)
rm(cyls)
cyls<-split(mtcars,mtcars$cyl)
cyls
cyls<-split(mtcars$hp,mtcars$cyl)
cyls
mean(cyls)
class(cyls)
mean(cyls[1])
mean(cyls[,1])
lapply(cyls,mean)
sapply(cyls,mean)
?sapply
mean(cyls[[1]])
cyls[[1]]
cyls["4"]
abs(cyls[[3]]-cyls[[1]])
abs(mean(cyls[[3]])-mean(cyls[[1]])
a
abs(mean(cyls[[3]])-mean(cyls[[1]]))
debug(ls)
ls()
stop
exit
aoeu
debug
browser()
recover
foo
bar
function() bar()
exit
quit
stop
break
break
break
break
exit
quit
str(debug)
?debug
undebug
debug
debug(ls)
ls
undebug(ls)
ls
test
msg
rm(msg)
rm(list=ls())
exit
quit
quit()
setwd("Rprac/datasciencecoursera/gettingAndCleaningData/quiz1/")
getwd()
rm(list=ls())
q1<-read.csv("getdata-data-ss06hid.csv")
head(q1)
count
length(q1[q1$val>1000000])
q1$val
length(q1[q1[val]>1000000])
length(q1[q1[[val]>1000000])
length(q1[val>1000000])
head(q1$val)
head(q1[val])
head(q1[[val]])
length(q1[q1$VAL>1000000])
class(q1$VAL)
q1$VAL>1000000
sum(q1$VAL>1000000,na.rm=TRUE)
q1$VAL
length(q1[VAL==24])
length(q1[q1$VAL==24])
q1$VAL==24
istrue
sum
is.true
sum(q1$VAL==24,na.rm=TRUE)
sum(q1$VAL==24)
sum(q1$VAL==24,na.rm=FALSE)
sum(q1$VAL==24,na.rm=TRUE)
colnames(q1)
colnum
col
?col
head(col(FES))
head(col(q1$FES))
head(col(q1[51]))
q1[[51]]
q1[51]
q1[[51]]
distinct
unique
unique(q1$FES)
order(unique(q1$FES))
order(unique(q1$FES),asc)
?order
order(unique(q1$FES),decreasing=TRUE)
order(unique(q1$FES),decreasing=FALSE)
sort
?sort
sort(unique(q1$FES))
library(xls)
read.xls
library(xlsx)
install.packages("xlsx")
library(xlsx)
list(package:xlsx)
ls("package:xlsx")
head(read.xlsx("getdata-data-DATA.gov_NGAP.xlsx")
)
?xlsx
?getSheets
system.file
?system.file
fileQ3<-system.file("Q3", "getdata-data-DATA.gov_NGAP.xlsx", package="xlsx")
wbQ3<-loadWorkbook(fileQ3)
fileQ3<-system.file("getdata-data-DATA.gov_NGAP.xlsx", "getdata-data-DATA.gov_NGAP.xlsx", package="xlsx")
fileQ3<-system.file(getdata-data-DATA.gov_NGAP.xlsx", package="xlsx")
fileQ3<-system.file("getdata-data-DATA.gov_NGAP.xlsx", package="xlsx")
colIndex<-7:15
rowIndex<-18:23
q3Subset<-read.xlsx("getdata-data-DATA.gov_NGAP.xlsx",sheetIndex=1,colIndex=colIndex,rowIndex=rowIndex)
q3Subset
sum(q3Subset$zip&q3Subset$Ext,na.rm=T)
sum(q3Subset$zip*q3Subset$Ext,na.rm=T)
dat<-read.xlsx("getdata-data-DATA.gov_NGAP.xlsx",sheetIndex=1,colIndex=colIndex,rowIndex=rowIndex)
sum(dat$Zip*dat$Ext,na.rm=T)
sum(q3Subset$Zip*q3Subset$Ext,na.rm=T)
xmlTreeParse("getdata-data-restaurants.xml",useInternal=TRUE)
library(XML)
install.packages("XML")
library("XML")
head(xmlTreeParse("getdata-data-restaurants.xml",useInternal=TRUE))
q4<-xmlTreeParse("getdata-data-restaurants.xml",useInternal=TRUE)
rootNode<-xmlRoot(q4)
rootNode
xmlName(rootNode)
names(rootNode)
xpathSApply(rootNode,"//zipcode",xmlValue)
len(xpathSApply(rootNode,"//zipcode",xmlValue)==21231)
length(xpathSApply(rootNode,"//zipcode",xmlValue)==21231)
sum(xpathSApply(rootNode,"//zipcode",xmlValue)==21231)
q5<-read.csv("getdata-data-ss06pid.csv",header=TRUE)
head(q5)
download.file()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv ")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
?download.file
fread
DT<-q5
rm(q5)
system.time(DT[,mean(pwgtp15),by=SEX])
class(DT)
system.time(mean(DT$pwgtp15,by=DT$SEX))
mean(DT$pwgtp15,by=DT$SEX)
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
data(DT)
trial_size <- 14931
collected_results <- numeric(trial_size)
for (i in 1:trial_size){
single_function_time <- system.time(DT[,mean(pwgtp15),by=SEX])
collected_results[i] <- single_function_time[1]
}
print(mean(collected_results))
data(DT)
trial_size <- 14931
collected_results <- numeric(trial_size)
for (i in 1:trial_size){
single_function_time <- system.time(mean(DT$pwgtp15,by=DT$SEX))
collected_results[i] <- single_function_time[1]
}
data(DT)
trial_size <- 200
collected_results <- numeric(trial_size)
for (i in 1:trial_size){
single_function_time <- system.time(mean(DT$pwgtp15,by=DT$SEX))
collected_results[i] <- single_function_time[1]
}
print(mean(collected_results))
?data
trial_size <- 200
collected_results <- numeric(trial_size)
for (i in 1:trial_size){
single_function_time <- system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
collected_results[i] <- single_function_time[1]
}
print(mean(collected_results))
trial_size <- 200
collected_results <- numeric(trial_size)
for (i in 1:trial_size){
single_function_time <- system.time(tapply(DT$pwgtp15,DT$SEX,mean))
collected_results[i] <- single_function_time[1]
}
print(c("Option 4:",mean(collected_results))
)
## option 1: DT[,mean(pwgtp15),by=SEX]
trial_size <- 200
collected_results <- numeric(trial_size)
for (i in 1:trial_size){
single_function_time <- system.time(DT[,mean(pwgtp15),by=SEX])
collected_results[i] <- single_function_time[1]
}
print(c("Option 1: ", mean(collected_results)))
## option 2: mean(DT$pwgtp15,by=DT$SEX)
trial_size <- 200
collected_results <- numeric(trial_size)
for (i in 1:trial_size){
single_function_time <- system.time(mean(DT$pwgtp15,by=DT$SEX))
collected_results[i] <- single_function_time[1]
}
print(c("Option 2: ", mean(collected_results)))
## option 3: sapply(split(DT$pwgtp15,DT$SEX),mean)
trial_size <- 200
collected_results <- numeric(trial_size)
for (i in 1:trial_size){
single_function_time <- system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
collected_results[i] <- single_function_time[1]
}
print(c("Option 3: ", mean(collected_results)))
## option 4: tapply(DT$pwgtp15,DT$SEX,mean)
trial_size <- 200
collected_results <- numeric(trial_size)
for (i in 1:trial_size){
single_function_time <- system.time(tapply(DT$pwgtp15,DT$SEX,mean))
collected_results[i] <- single_function_time[1]
}
print(c("Option 4: ",mean(collected_results)))
## option 5: mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
trial_size <- 200
collected_results <- numeric(trial_size)
for (i in 1:trial_size){
single_function_time <- system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
collected_results[i] <- single_function_time[1]
}
print(c("Option 5: ", mean(collected_results)))
## option 6: rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
trial_size <- 200
collected_results <- numeric(trial_size)
for (i in 1:trial_size){
single_function_time <- system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
collected_results[i] <- single_function_time[1]
}
print(c("Option 6: ", mean(collected_results)))
## option 1: DT[,mean(pwgtp15),by=SEX]
trial_size <- 1000
collected_results <- numeric(trial_size)
for (i in 1:trial_size){
single_function_time <- system.time(DT[,mean(pwgtp15),by=SEX])
collected_results[i] <- single_function_time[1]
}
print(c("Option 1: ", mean(collected_results)))
## option 2: mean(DT$pwgtp15,by=DT$SEX)
trial_size <- 1000
collected_results <- numeric(trial_size)
for (i in 1:trial_size){
single_function_time <- system.time(mean(DT$pwgtp15,by=DT$SEX))
collected_results[i] <- single_function_time[1]
}
print(c("Option 2: ", mean(collected_results)))
## option 3: sapply(split(DT$pwgtp15,DT$SEX),mean)
trial_size <- 1000
collected_results <- numeric(trial_size)
for (i in 1:trial_size){
single_function_time <- system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
collected_results[i] <- single_function_time[1]
}
print(c("Option 3: ", mean(collected_results)))
## option 4: tapply(DT$pwgtp15,DT$SEX,mean)
trial_size <- 1000
collected_results <- numeric(trial_size)
for (i in 1:trial_size){
single_function_time <- system.time(tapply(DT$pwgtp15,DT$SEX,mean))
collected_results[i] <- single_function_time[1]
}
print(c("Option 4: ",mean(collected_results)))
## option 5: mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
trial_size <- 1000
collected_results <- numeric(trial_size)
for (i in 1:trial_size){
single_function_time <- system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
collected_results[i] <- single_function_time[1]
}
print(c("Option 5: ", mean(collected_results)))
## option 6: rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
trial_size <- 1000
collected_results <- numeric(trial_size)
for (i in 1:trial_size){
single_function_time <- system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
collected_results[i] <- single_function_time[1]
}
print(c("Option 6: ", mean(collected_results)))
DT[,mean(pwgtp15),by=SEX]
DT[mean(pwgtp15),by=SEX]
mean(pwgtp15),by=SEX
by
?by
mean(DT$pwgtp15,by=DT$SEX)
by=DT$SEX
DT$pwgtp15
sapply(split(DT$pwgtp15,DT$SEX),mean)
mean(DT$pwgtp15,by=DT$SEX)
tapply(DT$pwgtp15,DT$SEX,mean)
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
microbenchmark(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
microbenchmark(mean(DT[DT$SEX==1,]$pwgtp15))
?microbenchmark
install.packages("microbenchmark")
library("microbenchmark")
ls()
ls(library)
microbenchmark(mean(DT[DT$SEX==1,]$pwgtp15)
)
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
rowMeans(DT)[DT$SEX==1]
rowMeans(DT$pwgtp15)[DT$SEX==1]
microbenchmark(DT[,mean(pwgtp15),by=SEX])
microbenchmark(mean(DT$pwgtp15,by=DT$SEX))
microbenchmark(sapply(split(DT$pwgtp15,DT$SEX),mean))
microbenchmark(tapply(DT$pwgtp15,DT$SEX,mean))
microbenchmark(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
part1<-microbenchmark(mean(DT[DT$SEX==1,]$pwgtp15))
part2<-microbenchmark(mean(DT[DT$SEX==2,]$pwgtp15))
part1+part2
